package bfs;

import java.util.Stack;

public class DFSExam {

	public static int[][] graph = {{},
			{2,3,8},
			{1,7},
			{1,4,5},
			{3,5},
			{3,4},
			{7},
			{2,6,8},
			{1,7}};
	public static boolean[] visite = new boolean[9];
	
	
	//bfs Àç±Í
	public static void bfsRecursive(int v) {
		
		visite[v] = true;
		
		System.out.print(v + " ");
		
		for(int i : graph[v]) {
			if(!visite[i]) {
				bfsRecursive(i);
			}
		}
	}
	
	public static void bfsStack(int v) {
		Stack<Integer> stack = new Stack<>();
		
		stack.push(v);
		visite[v] = true;
		
		while(!stack.isEmpty()) {
			int idx = stack.pop();
			System.out.print(v + " ");
			
			for(int i=graph.length-1; i>=0; i++) {
				int node = graph[idx][i];
				
				if(!visite[node]) {
					stack.push(node);
					visite[node] = true;
				}
			}
			
		}
	}
	
	public static void main(String[] args) {
		C
		bfsStack(1);
	}
}
